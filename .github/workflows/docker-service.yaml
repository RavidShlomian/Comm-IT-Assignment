name: Docker Build and Push to ECR

on:
  push:
    paths:
      - 'Docker/**'
    branches:
      - main

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REPO_NAME: ${{ secrets.REPO_NAME }}
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
  IMAGE_NAME: custom-nginx 
  MANIFEST_REPO: ${{ secrets.MANIFEST_REPO }}

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Amazon ECR
      run: |
        echo "AWS_REGION is: $AWS_REGION"
        aws configure set aws_access_key_id $AWS_ACCESS_KEY
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build Docker Image
      run: |
        docker build --no-cache -t $IMAGE_NAME ./Docker

    - name: Get Version from File
      id: get_version
      run: |
        VERSION=$(cat ./Docker/version)
        IFS='.' read -r major minor patch <<< "$VERSION"
        
        # Assuming we increment the patch for each build
        patch=$((patch + 1))
        
        # Reset patch and increment minor if it reaches 10 (or any threshold)
        if [ "$patch" -ge 10 ]; then
          patch=0
          minor=$((minor + 1))
        fi
        
        # Reset minor and increment major if it reaches 10 (or any threshold)
        if [ "$minor" -ge 10 ]; then
          minor=0
          major=$((major + 1))
        fi

        NEW_VERSION="$major.$minor.$patch"
        echo "::set-output name=NEW_VERSION::$NEW_VERSION"

    - name: Tag Docker Image
      run: |
        docker tag $IMAGE_NAME:latest $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME/$IMAGE_NAME:${{ steps.get_version.outputs.NEW_VERSION }}

    - name: Push Docker Image to ECR
      run: |
        docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:${{ env.NEW_VERSION }}

    - name: Confirm Push
      run: |
        echo "Docker image pushed to ECR: $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:${{ env.NEW_VERSION }}"

    - name: Checkout Manifests Repository
      uses: actions/checkout@v2
      with:
        repository: ${{ secrets.MANIFEST_REPO }}  
        token: ${{ secrets.TOKEN_GITHUB }}
        path: manifests  # This clones the separate repository into the 'manifests' directoryu

    - name: Update Kubernetes Manifests
      run: |
        sed -i "s|image: .*|image: $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME/$IMAGE_NAME:${{ env.VERSION }}|" manifests/deployment.yaml

    - name: Commit and Push Changes to Manifests
      run: |
        cd manifests
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add deployment.yaml
        git commit -m "Update image to $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME/$IMAGE_NAME:${{ env.VERSION }}"
        git push https://x-access-token:${{ secrets.TOKEN_GITHUB }}@github.com/RavidShlomian/dev.git main
